\section{Haldy}
\subsection{Binominální}
Les binominálních stromů $B_n$.
$B_0$ je jeden vrchol.
$B_k$ je strom $B_{k-1}$ spojený kořenem s druhým $B_{k-1}$

\begin{figure}[!ht]
\begin{center}
\MPOST
draw (0,0)--(-20,-20);
draw (20,-20)--(40,0)--(60,-20)--(40,-40);
draw (80,-20)--(100,0)--(120,-20)--(100,-40);
draw (100,0)--(160,-20);
draw (140,-40)--(160,-20)--(180,-40)--(160,-60);
pickup pencircle scaled 5;
drawdot (-40,0);
drawdot (0,0);
drawdot (-20,-20);
drawdot (40,0);
drawdot (20,-20);
drawdot (60,-20);
drawdot (40,-40);

drawdot (100,0);
drawdot (80,-20);
drawdot (120,-20);
drawdot (100,-40);
drawdot (160,-20);
drawdot (140,-40);
drawdot (180,-40);
drawdot (160,-60);
\ENDMPOST
\end{center}
\end{figure}

\observation{
→•
• $$\len{B_k} = 2^k$$
• $B_k$ lze chápat jako vrchol, ke kterému jsou připojené $B_0, …, B_{k-1}$.
←•
}

Dále, žádná úroveň stromu není použitá dvakrát.
To zaručuje, že halda velikosti $n$ má pevně danou velikost.

Každá hrana zachovává uspořádání, že nahoře jsou menší.

\subsubsection{Slití hald}
Podobně jako binární sčítání. Když se potkají $2$ stromy se stejnou úrovní, tak se spojí (tak, aby ten s lehčím kořenem byl nahoře) a vznikne jeden větší strom, který pokračuje jako přenos do další úrovně.

Toto lze stihnout $O(R)$, kde $R$ je maximální úroveň stromu. $R$ lze shora odhadnout logaritmem.

\subsubsection{Vkládání}
Vytvoříme haldu o $1$ prvku, poté je slijeme.

\subsubsection{Nalezení minima}
Mohli bychom projít všechny kořeny najít ho, ale budeme si udržovat ukazatel na strom s nejmenším kořenem.

\subsubsection{Odebrání minima}
Odebráním kořene z některého stromu se rozpadne na menší podstromečky.
Ty tvoří také binomickou haldu, tak ji slijeme.

\subsubsection{Snížení}
Obvyklým bubláním.

\subsubsection{Odebrání libovolného}
Stejné, jako snížení \uv{až do kořene} a odebrání.

\subsection{Líná binominální halda}
Již nebudeme požadovat, aby každé úrovně stromu byl maximálně jeden exemplář.

\subsubsection{Merge}
Můžeme seznamy pouze spojit, což lze udělat konstantně.

\subsubsection{Odebrání minima}
Napřed odebereme, poté haldy slijeme a nakonec haldu vyčistí a udělá z toho normální binominální haldu.

\begin{enumerate}
• Setřídíme stromy podle úrovně (stále platí, že $R∈\log N$, takže to můžeme udělat přihrádkově).
• Projdeme to od nejmenších a spojujeme po dvojicích, přestrkujeme o $1$ úroveň výš a ten max. jeden co zbude tu necháme.
\end{enumerate}

Setřídění trvá $O(T+\log N)$, slívání trvá $O(\log N + T)$ (každé spojení jednu ubere, máme jich $T$).

Definujeme potenciál $Φ:= \#$stromů.
Slití sečte oba $Φ$ dohromady, vyčištění bude odebírat.
Odebrání bude trvat $O(\log N)$ a vytvoří $O(\log N)$ nových stromečků.
Slitím dvou stromečků se spotřebuje $1$ z $Φ$, celkem \uv{Neslití} může být jen $O(\log N)$, protože maximální $R$ je stále $O(\log N)$.

\subsection{Fibonacciho halda}
Je to les zakořeněných stromů, jeho tvar se ukáže dále.
Každý vrchol obsahuje:
→•
• Element
• Seznam synů
• Stupeň (počet synů)
• Barvu (buď černá nebo bílá)
• Otce
←•

Uspořádání na vrcholech je obvyklé.
Každý kořen je bílý.

Většina operací je stejná jako u líné binominální haldy.

\subsubsection{Řez}
Pokud vrchol $V$ není kořen, tak ho odpojí od otce a uděláme ho kořenem (s přebarvením na bílo).
Nesmíme řezat $2$ syny stejného vrcholu, proto si budeme pomocí barvy pamatovat otce, kteří již ztratili syna, jako černé.

Pokud sebereme syna černému vrcholu, tak ho uřízneme také.

Kořen nikdy nepřebarvíme načerno.

\subsubsection{Odebrání minima}
→•
• Rozebrat -- Zabere $O(D)$, kde $D:=\max@{°@(V@)|∀V@}$.
• Přebarvit všechny nabílo (budou kořeny)
• Slít
• Uklidit
←•

\subsubsection{Snížení}
Pokud je $V$ kořen nebo není po zvýšení dost malý, neděje se nic.
Pokud by se snížil pod kořen, tak ho řízneme.

\subsubsection{Časová složitost}
$$Φ:=\#\hbox{stromů}+2·\#\hbox{černých vrcholů}$$.

\name{Úroveň} vrcholu $V$ u kořene bereme jako jeho stupeň, pokud přestane být kořenem, pak se mu již nemění.

\observation{Stupeň vrcholu může být maximálně o $1$ větší než jeho úroveň.}

Uklízení probíhá stejně, jako u líných binominálních hald, tedy trvá amortizovaně $O(D)$.

Při každém řezu (kde se něco děje, zanedbáme triviální řezy) se spotřebuje konstantní čas na zpracování řezaného vrcholu a vznikne jeden strom, tedy můžeme přidat do potenciálu.
Pokud bubláme nahoru, spotřebováváme \uv{černý} potenciál, jeden za nový strom a jeden za zpracování vrcholu.

\lemma{Invariant $1$}
Pokud máme vrchol se stupněm $r$ a $k$ synů se stupni $r_0≤r_1≤…≤r_{k-1}$, potom $r-1≤k≤r$ a $r_0≥0$.

\proof
Při vytvoření nového stromu, potom vznikne spojením dvou $r-1$ stromů, proto tento dostane úroveň $r$.
V horním stromu to indukce platí. Přidáním nového syna pod ten kořen se to tím nezhorší, protože má úroveň $r-1$.

Nezničí to ani řez, pokud je to otec, tak se úroveň správně upraví, jinak může ztratit maximálně jednoho syna.

\lemma{Invariant $2$}
Pokud $V$ má úroveň $k$, potom $\len{T_V} ≥ h_k$ ($T_V$ je strom zakořeněný v $V$).
\begin{eqnarray*}
h_0 &=& 1\\
h_1 &=& 1\\
h_2 &=& 2\\
&\vdots&\\
h_k &=& 1 + h_0 + h_0 + h_1 + h_2 + … + h_{k-3}
\end{eqnarray*}

Dostaneme sečtením podstromů a $V$ samotného.
Tato funkce roste podobně jako fibonacciho čísla, jen jsou o jedničku větší.
Toto lze dokázat indukcí a dosazením.

\TODO{Tadyten důkaz není kompletní, doplnit a pochopit}
